<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Window 平台 Git-Bash 的配置</title>
      <link href="/2019/09/05/2019-05-05-Window%20platform%20Git-Bash%20configuration/"/>
      <url>/2019/09/05/2019-05-05-Window%20platform%20Git-Bash%20configuration/</url>
      
        <content type="html"><![CDATA[<p>通过这篇文章, 可以了解到:</p><ul><li><strong>为什么要使用 Git-Bash, 以及 Git-Bash 的优点</strong></li><li><strong>Git-Bash 的外观主题配置</strong></li><li><strong>Git-Bash 修改前缀 (隐藏用户@主机)</strong></li><li><strong>Git-Bash 命令行基础</strong></li></ul><h2 id="Git-Bash-的优点"><a href="#Git-Bash-的优点" class="headerlink" title="Git-Bash 的优点"></a>Git-Bash 的优点</h2><p>在开发的过程中, 我们可能需要使用大量的命令行工具, 或者远程连接到服务器进行操作. 然而, 由于 Window 自带的 CMD 和 PowerShell 都不太好用, 而且在 Window 下的命令又与 Linux 和 MacOS 的命令不太一样, 如果需要经常跨平台操作, 学习 Window 的命令行命令无疑是增加了学习成本, 因此就有了需要一个能做到通用命令的工具.<br>在 Window 下使用类似 Linux 命令的工具有很多, 例如 WIndow10 上提供的 WSL(WIndow Sub Linux), CygWin 以及 Git-Bash.</p><h3 id="WSL"><a href="#WSL" class="headerlink" title="WSL"></a>WSL</h3><blockquote><p>The Windows Subsystem for Linux lets developers run Linux environments – including most command-line tools, utilities, and applications – directly on Windows, unmodified, without the overhead of a virtual machine.</p></blockquote><p>WSL 是微软提供的一套可以运行 Linux 环境而又不用加载虚拟机的子系统. 使用 WSL 可以像使用 Ubuntu 一样的操作, 而且还能访问 WIndow 上的文件系统.</p><h3 id="CygWin"><a href="#CygWin" class="headerlink" title="CygWin"></a>CygWin</h3><p>CygWin 是运行在 Window 平台的类 Unix 环境, CygWIn 通过将部分 Posix 条用转换成 Window 的 API 调用, 从而实现相关功能.</p><h3 id="Git-Bash"><a href="#Git-Bash" class="headerlink" title="Git-Bash"></a>Git-Bash</h3><p>我们这篇文章介绍的 Git-Bash, 是 <a href="https://git-scm.com/" target="_blank" rel="noopener">Git 官网</a> 上提供的一个 Git 开发工具包里的一个命令行组件.<br>Git-Bash 源自 MinGW, 是一个用于开发原生 Window 应用的开发环境, 提供了针对 WIn32 应用的 GCC、GNU binutils 等工具.</p><p>我们可以根据自己的需求, 进行选择, 这里我选择 Git-Bash 的原因, 是我的开发需求主要为启动前端服务及提交代码, 因此选择 Git-Bash 较为方便、简单.</p><h2 id="Git-Bash-的主题配置"><a href="#Git-Bash-的主题配置" class="headerlink" title="Git-Bash 的主题配置"></a>Git-Bash 的主题配置</h2><p>Git-Bash 原生的主题, 其实也并不难看, 更换 Git-Bash 的需求主要在于, 我的 Ubuntu 服务器端配置了 oh-my-zsh. 因此如果使用 Git-Bash 的默认主题进行 SSH 连接, 会因为字体问题而无法正常显示, 还有就是 Git-Bash 原生的主题配色和 MacOS 下 iTerm Solarized 主题配色差距甚大. 因此, 一是视觉上不同一, 看上去不习惯, 而是本着手贱的探索精神, 总希望做点特别的挑战, 就有了去修改 Git-Bash 主题的需求.</p><p>修改 Git-Bash 主题主要有两个困难, 一是 Git-Bash 自带的 Options 下 Text 设置有缺陷, 只有有限的字体可选, 一些系统上已经安装了的字体, 这里并没有得选择. 而要使用 Git-Bash SSH 连接使用了 agnoster 主题的 ZSH, 需要一种含特殊字符的字体 Powerline, 没有了这种字体, 就会出现乱码.</p><h3 id="Git-Bash-配色主题设置"><a href="#Git-Bash-配色主题设置" class="headerlink" title="Git-Bash 配色主题设置"></a>Git-Bash 配色主题设置</h3><p>配置方法很简单, 在 Git-Bash 中我们输入以下代码: <code>vi ~/.minttyrc</code> , 然后把以下内容添加到配置文件里面</p><pre><code>BoldAsFont=yesFontHeight=12Scrollbar=noneTerm=xterm-256colorBoldAsColour=yesBlack=7,54,66Red=220,50,47Green=133,153,0Yellow=181,137,0Blue=38,139,210Magenta=211,54,130Cyan=42,161,152White=238,232,213BoldBlack=0,43,54BoldRed=203,75,22BoldGreen=88,110,117BoldYellow=101,123,131BoldBlue=131,148,150BoldMagenta=108,113,196BoldCyan=147,161,161BoldWhite=253,246,227ForegroundColour=192,192,192BackgroundColour=0,43,54CursorColour=133,153,0Columns=80Rows=25BoldAsFont=-1Locale=zh_CNCharset=UTF-8Font=ConsolasTransparency=offCursorType=blockCursorBlinks=yes</code></pre><p>在  vim  编辑器下, 你可以使用方向键移动光标, 按 <code>i</code> 进入编辑模式, 编辑好后按 <code>esc</code> 退出编辑模式, 随后输入 <code>:wq</code>    并回车即可保存. 有关 Vim  的更多使用方法你可以参考<a href="https://www.runoob.com/linux/linux-vim.html" target="_blank" rel="noopener">这篇教程</a>.</p><p>然后重启 Git-Bash, 即可看到新的主题配色, 以下是我的 Git-Bash 外观主题配置样例.</p><p><img src="/assets/images/posts/git/5B71993FBCA98C3B9BF53A3AE063DA19.png" alt=""></p><h2 id="Git-Bash-修改前缀-隐藏用户-主机"><a href="#Git-Bash-修改前缀-隐藏用户-主机" class="headerlink" title="Git-Bash 修改前缀 (隐藏用户@主机)"></a>Git-Bash 修改前缀 (隐藏用户@主机)</h2><p>有时候经常嫌一层一层目录实在太长太占地方, 而且截屏时也不方便把全路径显示出来. 所以需要隐藏起来会比较方便, 需要看全路径的话一句 <code>pwd</code> 就显示了.</p><p>在 Git-Bash 中我们输入以下代码: <code>vi ~/.bash_profile</code> , 然后把以下内容添加到配置文件里面</p><pre class=" language-zsh"><code class="language-zsh"># Shows Git branch name in prompt.parse_git_branch() {  git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/'}# Show User @ Name (still with git branch name)# export PS1="\u@\h \W\[\033[32m\]\$(parse_git_branch)\[\033[00m\] $ "# Or hide User @ Name (still with git branch name)export PS1="\W\[\033[32m\]\$(parse_git_branch)\[\033[00m\] $ "</code></pre><h2 id="Git-Bash-命令行基础"><a href="#Git-Bash-命令行基础" class="headerlink" title="Git-Bash 命令行基础"></a>Git-Bash 命令行基础</h2><h3 id="一、常见命令"><a href="#一、常见命令" class="headerlink" title="一、常见命令"></a>一、常见命令</h3><table><thead><tr><th>操作</th><th>命令</th></tr></thead><tbody><tr><td>进入目录</td><td>cd</td></tr><tr><td>显示当前目录</td><td>pwd</td></tr><tr><td>创建目录</td><td>mkdir 目录名</td></tr><tr><td>创建目录</td><td>mkdir -p 目录路径</td></tr><tr><td>我是谁</td><td>whoami</td></tr><tr><td>查看路径</td><td>ls 路径</td></tr><tr><td>查看路径</td><td>ls -a 路径(显示隐藏文件)</td></tr><tr><td>查看路径</td><td>ls -l 路径(显示更多信息(drwx:d 是否是目录, rw 是否可以读写, x 是否可以执行))</td></tr><tr><td>查看路径</td><td>ls -al 路径 (显示隐藏信息和详细信息)</td></tr><tr><td>创建文件</td><td>echo ‘1’ &gt; 文件路径 (并且把内容”1”写入文件)</td></tr><tr><td>强制创建文件</td><td>echo ‘1’ &gt;! 文件路径(只能用在 linux, windows 出错)强制重定向, 覆盖原来有的内容</td></tr><tr><td>追加文件内容</td><td>echo ‘1’ &gt;&gt; 文件路径(只能用在 linux, windows 出错)</td></tr><tr><td>创建文件</td><td>touch 文件名</td></tr><tr><td>改变文件更新时间</td><td>touch 文件名</td></tr><tr><td>复制文件</td><td>cp 源路径 目标路径(可以覆盖原来有的文件)</td></tr><tr><td>复制目录</td><td>cp -r 源路径 目标路径</td></tr><tr><td>移动节点</td><td>mv 源路径 目标路径(修改文件名)</td></tr><tr><td>删除文件</td><td>rm 文件路径</td></tr><tr><td>强制删除文件</td><td>rm -f 文件路径</td></tr><tr><td>删除目录</td><td>rm -r 目录路径</td></tr><tr><td>强制删除目录</td><td>rm -rf 目录路径</td></tr><tr><td>查看目录结构</td><td>tree(windows 不支持)</td></tr><tr><td>建立软链接</td><td>ln -s 真实文件 链接</td></tr><tr><td>下载文件</td><td>curl -L <a href="https://www.baidu.com/" target="_blank" rel="noopener">https://www.baidu.com</a> &gt; baidu.html</td></tr><tr><td>拷贝网页</td><td>wget -p -H -e robots=off <a href="https://www.baidu.com/" target="_blank" rel="noopener">https://www.baidu.com</a> (整个网页所有文件)</td></tr><tr><td>磁盘占用</td><td>df -kh</td></tr><tr><td>当前目录大小</td><td>du -sh .</td></tr><tr><td>各文件大小</td><td>du -h</td></tr><tr><td>查看文件内容</td><td>cat</td></tr></tbody></table><h4 id="需要注意的点"><a href="#需要注意的点" class="headerlink" title="需要注意的点"></a>需要注意的点</h4><ol><li>各种符号代表的含义</li></ol><ul><li><code>~</code> : 用户目录: 我的电脑上就是 <code>/c/Users/ASUS</code></li><li><code>/</code> : 根目录, 一个 <code>/</code> 就是根目录, 不管你有多少个硬盘, 他会把所有硬盘联合起来当作一块</li><li><code>.</code> : 一个点表示当前目录,</li><li><code>../</code> : 两个点表示父目录</li><li>TAB 键可以补全文件名或者目录</li></ul><ol start="2"><li>绝对路径与相对路径</li></ol><ul><li>如果一个路径是用 <code>/</code> 开始的, Windows 就从根目录开始找起(绝对路径), 否则就从当前目录开始找(相对路径).</li></ul><h3 id="二、命令行技巧"><a href="#二、命令行技巧" class="headerlink" title="二、命令行技巧"></a>二、命令行技巧</h3><h4 id="1-打开-Git-Bash-自动运行"><a href="#1-打开-Git-Bash-自动运行" class="headerlink" title="1. 打开 Git Bash 自动运行"></a>1. 打开 Git Bash 自动运行</h4><ol><li>首先在命令行输入 <code>vi ~/.bashrc</code> 创建一下这个文件</li><li>按 <code>i</code> 进入编辑模式编辑这个文件, 内容为 <code>echo 'Hi'</code></li><li>你也可以用命令行编辑文件 <code>echo "echo 'hi'" &gt;&gt; ~/.bashrc</code></li><li>关闭退出 Git Bash, 然后打开 Git Bash, 是不是看到了 Hi, 这说明每次进入 Git Bash, 就会优先运行 <code>~/.bashrc</code> 里面的命令</li><li>如果没有看到 Hi, 运行 <code>source ~/.bashrc</code> , 作用是执行 <code>~/.bashrc</code></li><li>重新编辑 <code>~/.bashrc</code> , 内容改为 <code>cd ~/Desktop</code> , 重启 Git Bash, 有没有发现默认就进入桌面目录了?</li><li>你可以用 <code>~/.bashrc</code> 在进入 Git Bash 前执行任何命令, 十分方便.</li></ol><h4 id="2-alias-命令行缩写"><a href="#2-alias-命令行缩写" class="headerlink" title="2. alias 命令行缩写"></a>2. <code>alias</code> 命令行缩写</h4><ol><li>在 <code>~/.bashrc</code> 里新增一行 <code>alias f="echo 'frank is awesome'"</code> , 等于号两边不能有空格, 你最好一个字都不要错.</li><li>运行 <code>source ~/.bashrc</code> , 作用是执行 <code>~/.bashrc</code></li><li>运行 <code>f</code> , 就会看到 <code>frank is awesome</code></li><li>也就是说, 现在 <code>f</code> 就是 <code>echo 'frank is awesome'</code> 的缩写了, 利用这个技巧, 我们可以把很多常见的命令缩写一下, 比如:</li></ol><pre><code>   alias gl='git pull'   alias gaa='git add .'   alias gcmsg='git commit -m'   alias gcam='git commit -a -m'   alias gp='git push'   alias gco='git checkout'   alias gm='git merge'   alias gss='git status -s'   alias glol='git log –graph –pretty = format:’%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset’ –abbrev-commit'   alias grh='git reset HEAD'   alias gba='git branch -a'   alias gcf='git config –list'   alias gcl='git clone –recursive'   alias gd='git diff'   alias ghh='git help'   alias ns='npm run serve'   alias nb='npm run build'   alias nd='npm run dev'</code></pre><ol start="5"><li>保存退出, 然后运行 <code>source ~/.bashrc</code></li></ol><p>这样一来, 你的 Git 操作就会简单很多:</p><pre class=" language-zsh"><code class="language-zsh">glgaagcam 'msg'gp</code></pre><h3 id="3-解决-bashrc-文件每次打开终端都需要-source-的问题"><a href="#3-解决-bashrc-文件每次打开终端都需要-source-的问题" class="headerlink" title="3. 解决.bashrc 文件每次打开终端都需要 source 的问题"></a>3. 解决.bashrc 文件每次打开终端都需要 source 的问题</h3><p>这个问题困扰我很久, 我明明改了 <code>~/.bashrc</code> 文件, 每次打开 Git Bash 都要手动输入 <code>source ~/.bashrc</code> , 配置才会生效, 很是头疼, 于是我就研究了一下解决办法以及问题的原因是什么.</p><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p><code>vi ~/.bash_profile</code> 在文件内部输入:</p><pre class=" language-zsh"><code class="language-zsh"># Loading .bashrc Filesource ~/.bashrc</code></pre><p>在 <code>.bash_profile</code> 文件中自动加载 <code>.bashrc</code> 文件.</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://www.jianshu.com/p/5acb8d8cef32" target="_blank" rel="noopener">Window 平台 Git-Bash 的主题配置 - 简书</a></li><li><a href="http://www.manongjc.com/article/79147.html" target="_blank" rel="noopener">Git Bash 主题配置 - 码农教程</a></li><li><a href="https://www.jianshu.com/p/ee442cb4d6c2" target="_blank" rel="noopener">Bash shell / Zsh 里修改前缀 (隐藏用户@主机, 添加 Git 分支名称) - 简书</a></li><li><a href="https://segmentfault.com/a/1190000013736711" target="_blank" rel="noopener">Git Bash 命令行基础 - 马涛涛的博客——前端的征途 - SegmentFault 思否</a></li><li><a href="https://www.jianshu.com/p/c4946024b946" target="_blank" rel="noopener">解决.bashrc 文件每次打开终端都需要 source 的问题 - 简书</a></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
          <category> Git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/09/05/hello-world/"/>
      <url>/2019/09/05/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Chrome 浏览器必知必会的小技巧</title>
      <link href="/2017/12/03/Chrome%20browser%20will%20know%20the%20trick/"/>
      <url>/2017/12/03/Chrome%20browser%20will%20know%20the%20trick/</url>
      
        <content type="html"><![CDATA[<p>这篇文章主要介绍的就是一些 Chrome 浏览器的小技巧, 很简单, 希望对大家有所帮助.</p><p>这其中的一些小技巧在低版本中是没有的, 所以建议大家用最新版的, 目前最新版是 62, 版本很重要, 如果发现有些技巧不起作用, 请先查看浏览器的版本.</p><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><p>快捷键比较多, 这里挑出几个常用的说一下</p><p>Mac 快捷键有很多和 Windows 不同, 如果需要修改为和 Windows 一致, <a href="https://lhajh.github.io/mac/2017/12/05/Mac-custom-application-shortcut-keys.html" target="_blank" rel="noopener">请点这里</a></p><h3 id="URL-链接"><a href="#URL-链接" class="headerlink" title="URL 链接"></a>URL 链接</h3><ul><li>在新标签页打开<ul><li>Ctrl + click / Cmd + click</li><li>鼠标中键</li></ul></li><li>在新窗口打开<ul><li>Shift + click</li></ul></li><li>在新标签页打开地址栏中内容或 URL<ul><li>Alt + Enter / Opt + return</li></ul></li></ul><h3 id="粘贴纯文本"><a href="#粘贴纯文本" class="headerlink" title="粘贴纯文本"></a>粘贴纯文本</h3><p>在网页中编辑文本时(例如写邮件), 若只想复制纯文本, 不要使用 Ctrl+V, 而使用 Ctrl+Shift+V</p><h3 id="下列快捷键可以在所有-开发者工具-面板中可以使用"><a href="#下列快捷键可以在所有-开发者工具-面板中可以使用" class="headerlink" title="下列快捷键可以在所有 开发者工具 面板中可以使用"></a>下列快捷键可以在所有 开发者工具 面板中可以使用</h3><table><thead><tr><th align="left">全局快捷键</th><th align="left">windows</th><th align="left">Mac</th></tr></thead><tbody><tr><td align="left">打开 开发者工具</td><td align="left">F12、Ctrl+Shift+I</td><td align="left">Cmd+Opt+I</td></tr><tr><td align="left">打开 开发者工具 并聚焦到控制台</td><td align="left">Ctrl+Shift+J</td><td align="left">Cmd+Shift+J</td></tr><tr><td align="left">刷新页面</td><td align="left">F5、Ctrl+R</td><td align="left">Cmd+R</td></tr><tr><td align="left">刷新忽略缓存内容的页面</td><td align="left">Ctrl+F5、Ctrl+Shift+R</td><td align="left">Cmd+Shift+R</td></tr></tbody></table><h3 id="在-Elements-面板中使用的快捷键"><a href="#在-Elements-面板中使用的快捷键" class="headerlink" title="在 Elements 面板中使用的快捷键"></a>在 Elements 面板中使用的快捷键</h3><table><thead><tr><th align="left">Elements 面板</th><th align="left">windows</th><th align="left">Mac</th></tr></thead><tbody><tr><td align="left">编辑属性</td><td align="left">Enter、双击属性</td><td align="left">Enter、双击属性</td></tr><tr><td align="left">隐藏元素</td><td align="left">H</td><td align="left">H</td></tr><tr><td align="left">切换为以 HTML 形式编辑</td><td align="left">F2</td><td align="left">F2</td></tr></tbody></table><h3 id="在-Styles-边栏中使用的快捷键"><a href="#在-Styles-边栏中使用的快捷键" class="headerlink" title="在 Styles 边栏中使用的快捷键"></a>在 Styles 边栏中使用的快捷键</h3><table><thead><tr><th align="left">Styles 边栏</th><th align="left">windows</th><th align="left">Mac</th></tr></thead><tbody><tr><td align="left">转到源中属性值声明行</td><td align="left">Ctrl+点击属性值</td><td align="left">Cmd+点击属性值</td></tr><tr><td align="left">在颜色定义值之间循环</td><td align="left">Shift+点击颜色选取器框</td><td align="left">Shift+点击颜色选取器框</td></tr><tr><td align="left">编辑下一个/上一个属性</td><td align="left">Tab、Tab+Shift</td><td align="left">Tab、Tab+Shift</td></tr></tbody></table><h3 id="在控制台中使用的快捷键"><a href="#在控制台中使用的快捷键" class="headerlink" title="在控制台中使用的快捷键"></a>在控制台中使用的快捷键</h3><table><thead><tr><th align="left">控制台</th><th align="left">windows</th><th align="left">Mac</th></tr></thead><tbody><tr><td align="left">聚焦到控制台</td><td align="left">Ctrl+`</td><td align="left">同 Windows</td></tr><tr><td align="left">清除控制台</td><td align="left">Ctrl+L</td><td align="left">Cmd+K、Ctrl+L</td></tr><tr><td align="left">多行输入</td><td align="left">Shift+Enter</td><td align="left">Shift+Return</td></tr></tbody></table><h3 id="快速切换文件"><a href="#快速切换文件" class="headerlink" title="快速切换文件"></a>快速切换文件</h3><p>按 Ctrl+P(Cmd+P on mac), 就能快速搜寻和打开你项目的文件.</p><p><img src="/assets/images/posts/chrome/958489-20160717123138561-250746507.gif" alt=""></p><h3 id="在源代码中搜索"><a href="#在源代码中搜索" class="headerlink" title="在源代码中搜索"></a>在源代码中搜索</h3><p>大家都知道如果在要在 Elements 查看源码, 只要定位到 Elements 面板, 然后按 Ctrl+F 就可以了</p><p><img src="/assets/images/posts/chrome/958489-20160717123257576-433038283.png" alt=""></p><h3 id="在源代码中快速跳转到指定的行"><a href="#在源代码中快速跳转到指定的行" class="headerlink" title="在源代码中快速跳转到指定的行"></a>在源代码中快速跳转到指定的行</h3><p>在 Sources 标签中打开一个文件之后, 按 Ctrl + G, 然后输入行号, chrome 控制台就会跳转到你输入的行号所在的行. 或者 Ctrl+P 后输入 <code>:行号</code></p><p><img src="/assets/images/posts/chrome/958489-20160717123408482-2034590723.gif" alt=""></p><h3 id="使用多个插入符进行选择"><a href="#使用多个插入符进行选择" class="headerlink" title="使用多个插入符进行选择"></a>使用多个插入符进行选择</h3><p>当编辑一个文件的时候, 你可以按住 Ctrl / Cmd 在你要编辑的地方点击鼠标, 可以设置多个插入符, 这样可以一次在多个地方编辑</p><p><img src="/assets/images/posts/chrome/958489-20160717123625811-1748778395.gif" alt=""></p><h3 id="选择下一个匹配项"><a href="#选择下一个匹配项" class="headerlink" title="选择下一个匹配项"></a>选择下一个匹配项</h3><p>当在 Sources 标签下编辑文件时, 按下 Ctrl + D (Cmd + D) , 当前选中的单词的下一个匹配也会被选中, 有利于你同时对它们进行编辑.</p><p><img src="/assets/images/posts/chrome/958489-20160717124628076-242284650.gif" alt=""></p><h3 id="强制改变元素状态-方便查看不同状态下元素的样式"><a href="#强制改变元素状态-方便查看不同状态下元素的样式" class="headerlink" title="强制改变元素状态(方便查看不同状态下元素的样式)"></a>强制改变元素状态(方便查看不同状态下元素的样式)</h3><p>chrome 控制台有一个可以模拟 CSS 状态的功能, 例如元素的 hover 和 focus, 可以很容易的改变元素样式. 在 CSS 编辑器中可以利用这个功能查看不同状态下元素的样式</p><p><img src="/assets/images/posts/chrome/958489-20160717124455420-77119485.gif" alt=""></p><h2 id="拖放的技巧"><a href="#拖放的技巧" class="headerlink" title="拖放的技巧"></a>拖放的技巧</h2><ul><li>拖动文本到 Omnibox (地址栏, 也叫 Omnibar) 进行搜索: 如果你先复制文本再粘贴在 Omnibox 中进行搜索, 那就太浪费时间了, 这儿有一个更快的方法来, 只需将你选中的文字拖放到 Omnibox 中就行了!</li><li>拖动文本到标签栏, 可以在新标签中打开搜索: 与上一条小技巧很像. 差别是不再拖动文本到地址栏, 而是拖放在标签栏上, 这样可以在新标签中打开搜索页面.</li><li>拖动链接到 Omnibar 来打开它们: 拖动书签栏中的链接到地址栏打开它.</li><li>拖放链接到标签栏上, 可以在新标签中打开链接: 当浏览网页时, 想打开的链接很多, 但不想关闭或离开当前页面, 可以拖动链接到标签栏, 就可以在新标签中打开链接.</li><li>拖动图片到标签栏: 就像你拖动网址或文本到地址栏一样, 你可以拖动图像到地址栏并打开它们.</li><li>拖动链接到书签栏: 忘记添加书签的键盘快捷键吧, 直接拖动 URL 到你的书签栏, 体验不同的行事风格!</li><li>用 Chrome 的拖放打开在电脑上保存的文件: 你可以拖放本地文件到 Chrome 打开, HTML 文件和图像等最适合使用这种方法, 但我个人最喜欢通过这种方式打开 PDF 文件.</li></ul><h2 id="区域截屏"><a href="#区域截屏" class="headerlink" title="区域截屏"></a>区域截屏</h2><p>选取页面中的一部分, 保存为图片</p><ol><li><p>打开开发者工具</p><p>使用 快捷键 F12 (Windows) 或 Cmd+Opt+I (Mac)</p></li><li><p>选择左上角的元素选择按钮, 图标颜色变为蓝色即表示选中了</p><p><img src="/assets/images/posts/chrome/3724810944-5a1798222f377_articlex.png" alt=""></p></li><li><p>Windows 下按住 Ctrl, Mac 就按住 Command, 然后点击鼠标左键在页面选择区域即可, 松开鼠标后, 截图自动下载.</p></li><li><p>图片自动下载好后, 点击图片后面的箭头, 可以在文件夹中显示</p></li></ol><h2 id="节点截图"><a href="#节点截图" class="headerlink" title="节点截图"></a>节点截图</h2><p>选中页面中某一元素, 保存为图片</p><ol><li><p>打开开发者工具</p><p>使用 快捷键 F12 (Windows) 或 Cmd+Opt+I (Mac)</p></li><li><p>选中任意元素节点</p><p><img src="/assets/images/posts/chrome/3141943530-5a1798220affc_articlex.png" alt=""></p></li><li><p>打开命令工具</p><p>使用快捷键 Ctrl + Shift + p (Windows) 或 Cmd + Shift + p (Mac)</p><p><img src="/assets/images/posts/chrome/4174394162-5a17982205f1e_articlex.png" alt=""></p></li><li><p>点击 Capture node screenshot, 或者输入这行中任意的关键字, 比如输入 node, 也会出来这个选项, 然后点击这个选项, 图片会自动下载.</p><p><img src="/assets/images/posts/chrome/4197825486-5a17982202f10_articlex.png" alt=""></p></li><li><p>图片自动下载好后, 点击图片后面的箭头, 可以在文件夹中显示</p></li></ol><h2 id="截全屏"><a href="#截全屏" class="headerlink" title="截全屏"></a>截全屏</h2><p>保存完整网页为图片</p><h3 id="第一种方式"><a href="#第一种方式" class="headerlink" title="第一种方式"></a>第一种方式</h3><ol><li><p>打开开发者工具</p><p>使用 快捷键 F12 (Windows) 或 Cmd+Opt+I (Mac)</p></li><li><p>打开命令工具</p><p>使用快捷键 Ctrl + Shift + p (Windows) 或 Cmd + Shift + p (Mac)</p></li><li><p>点击 Capture full size screenshot, 或者输入这行中任意的关键字, 比如输入 full, 也会出来这个选项</p></li><li><p>图片自动下载好后, 点击图片后面的箭头, 可以在文件夹中显示</p></li></ol><h3 id="第二种方式"><a href="#第二种方式" class="headerlink" title="第二种方式"></a>第二种方式</h3><ol><li><p>打开开发者工具</p><p>使用 快捷键 F12 (Windows) 或 Cmd+Opt+I (Mac)</p></li><li><p>选中 切换开发模式按钮, 图标颜色变为蓝色即表示选中了</p><p><img src="/assets/images/posts/chrome/486739556-5a179821a89e0_articlex.png" alt=""></p></li><li><p>点右上方的三个 小点, 点击 Capture full size screenshot, 图片会自动下载</p><p><img src="/assets/images/posts/chrome/195224758-5a179821d0fce_articlex.png" alt=""></p></li></ol><h2 id="拾色器"><a href="#拾色器" class="headerlink" title="拾色器"></a>拾色器</h2><p>在颜色预览功能使用快捷键 Shift + Click, 可以在 rgba、hsl 和 hexadecimal 来回切换颜色的格式</p><p><img src="/assets/images/posts/chrome/958489-20160717124406764-1200025647.gif" alt=""></p><p>在 Styles 边栏 点击任意颜色的小色块, 就可以弹出颜色选择器</p><p><img src="/assets/images/posts/chrome/595917845-5a1798219bc16_articlex.png" alt=""></p><p><img src="/assets/images/posts/chrome/1474973432-5a1798225e459_articlex.png" alt=""></p><ol><li>颜色选择区域.</li><li>吸管. 拾取页面中的颜色</li><li>复制到剪贴板. 将显示值复制到剪贴板.</li><li>显示值. 颜色的 RGBA, HSLA 或十六进制表示.</li><li>调色板. 单击其中一个方块将颜色更改为该方块.</li><li>色相.</li><li>透明度.</li><li>显示值切换器. 在当前颜色的 RGBA, HSLA 和 Hex 表示之间切换.</li><li>调色板切换器.</li></ol><p>当吸管开启时, 如果你停留在页面, 鼠标指针会变成一个放大镜, 让你去选择像素精度的颜色.</p><p><img src="/assets/images/posts/chrome/958489-20160717124317357-901312966.gif" alt=""></p><h2 id="快速添加样式规则"><a href="#快速添加样式规则" class="headerlink" title="快速添加样式规则"></a>快速添加样式规则</h2><ol><li><p>在 Styles 边栏, 鼠标放在每一小块样式规则上, 右下方都会有三个小点</p><p><img src="/assets/images/posts/chrome/3095904712-5a17982158445_articlex.png" alt=""></p></li><li><p>鼠标放在这三个小点上, 会出现 5 个小图标, 每个小图标都有作用</p><p><img src="/assets/images/posts/chrome/1854119425-5a1798215724c_articlex.png" alt=""></p></li><li><p>他们从左到右分别代表</p><ul><li>添加 text-shadow</li><li>添加 box-shadow</li><li>添加 color</li><li>添加 background-color</li><li>插入样式规则</li></ul></li></ol><h2 id="增加移动设备"><a href="#增加移动设备" class="headerlink" title="增加移动设备"></a>增加移动设备</h2><ol><li><p>打开开发者工具</p></li><li><p>点击右上方的三个小点, 然后选择 Settings</p><p><img src="/assets/images/posts/chrome/4262851757-5a1798215d2ee_articlex.png" alt=""></p></li><li><p>选择 Devices, 然后在需要添加的设备前面打上勾就可以了</p><p><img src="/assets/images/posts/chrome/752007610-5a1798215531f_articlex.png" alt=""></p></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这些小技巧, 很简单, 希望对大家有所帮助, 不过对于有办法、有时间的朋友还是建议去官网看看吧, 毕竟那里才更加全面.</p><p><a href="https://developers.google.com/web/tools/chrome-devtools/?hl=zh-cn" target="_blank" rel="noopener">Chrome 开发者工具</a></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://segmentfault.com/a/1190000012143176" target="_blank" rel="noopener">简单说 chrome 浏览器 必知必会的小技巧</a></li><li><a href="https://www.cnblogs.com/tester-l/p/6018067.html" target="_blank" rel="noopener">Chrome 使用技巧</a></li><li><a href="https://www.zhihu.com/question/20309902" target="_blank" rel="noopener">Chrome 有哪些不易发现的功能或使用技巧?</a></li><li><a href="https://juejin.im/post/5c09a80151882521c81168a2" target="_blank" rel="noopener">【译】你不知道的 Chrome 调试工具技巧</a></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Chrome </category>
          
          <category> win </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
